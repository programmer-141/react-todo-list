{"version":3,"sources":["Components/todos.js","Components/TodoList.js","Components/Form.js","Components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","text","todo","todos","setTodos","className","completed","onClick","map","item","id","filter","el","TodoList","key","Form","setInputText","inputText","onChange","e","console","log","target","value","type","placeholder","preventDefault","Math","random","Todo","useState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUAkCeA,G,MA/BD,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAKC,EAAwB,EAAxBA,KAAKC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,SAoB5B,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,QACf,wBAAIA,UAAS,oBAAeH,EAAKI,UAAY,YAAa,KAAOL,IAEjE,4BAAQM,QAnBQ,WACpBH,EACID,EAAMK,KAAI,SAACC,GACP,OAAIA,EAAKC,KAAOR,EAAKQ,GACjB,2BACOD,GADP,IAEIH,WAAYG,EAAKH,YAGtBG,OAU6BJ,UAAU,QAA9C,KACA,4BAAQE,QAxBM,WACjBH,EAASD,EAAMQ,QAAO,SAAAC,GAAE,OAAIA,EAAGF,KAAMR,EAAKQ,QAuBPL,UAAU,aAA1C,QCXGQ,MAff,YAAqC,IAAlBV,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,SAIrB,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,aACXF,EAAMK,KAAI,SAAAN,GAAI,OACb,kBAAC,EAAD,CAAOC,MAAOA,EAAOC,SAAUA,EAAUU,IAAKZ,EAAKQ,GAAIR,KAAMA,EAAMD,KAAMC,EAAKD,a,aCY/Ec,MApBf,YAA2D,IAA5CC,EAA2C,EAA3CA,aAAcb,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUa,EAAY,EAAZA,UAY1C,OACI,8BACI,2BAAOC,SAbU,SAACC,GACvBC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBP,EAAaG,EAAEG,OAAOC,QAWoBA,MAAON,EAAWO,KAAK,OAAOnB,UAAU,SAASoB,YAAY,cAClG,4BAAQlB,QAVU,SAACY,GACvBA,EAAEO,iBACFtB,EAAS,GAAD,mBACDD,GADC,CACM,CAACF,KAAKgB,EAAWX,WAAU,EAAOI,GAAmB,IAAhBiB,KAAKC,aAExDZ,EAAa,KAK6BQ,KAAK,SAASnB,UAAU,OAA9D,OCOGwB,MApBf,WAAgB,MAEoBC,mBAAS,IAF7B,mBAEPb,EAFO,KAEID,EAFJ,OAGYc,mBAAS,IAHrB,mBAGP3B,EAHO,KAGAC,EAHA,KAKV,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACf,wBAAIA,UAAU,QAAd,aAMA,kBAAC,EAAD,CAAMF,MAAOA,EAAOC,SAAUA,EAAUY,aAAgBA,EAAcC,UAAWA,IACjF,kBAAC,EAAD,aAAUd,MAAOA,EAAOC,SAAUA,GAAlC,QAAmDD,MCV9C4B,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.215e9eb2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './todos.css';\r\n\r\nconst Todos = ({text,todo,todos,setTodos}) =>{\r\n\r\n    const deleteHandler = () =>{\r\n         setTodos(todos.filter(el => el.id !==todo.id))\r\n    };\r\n\r\n    const completeHandler = () => {\r\n        setTodos(\r\n            todos.map((item) => {\r\n                if (item.id === todo.id){\r\n                    return{\r\n                        ...item,\r\n                        completed: !item.completed,\r\n                    };\r\n                }\r\n            return item;\r\n            })\r\n        );\r\n    };\r\n\r\n    return(\r\n        <div className='todos'>\r\n            <div className='list'>\r\n            <li className={`todo-item ${todo.completed ? \"completed\": \"\"}`}>{text}</li>\r\n            </div>\r\n            <button onClick = {completeHandler} className=\"btn1\">C</button>\r\n            <button onClick={deleteHandler} className=\"btn1 btn2\">X</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\nimport Todos from './todos';\r\n\r\nfunction TodoList({todos,setTodos}) {\r\n\r\n    // console.log(todos);\r\n\r\n    return(\r\n        <div className=\"todo-cont\">\r\n            <ul className=\"todo-list\">\r\n              {todos.map(todo =>(\r\n                <Todos todos={todos} setTodos={setTodos} key={todo.id} todo={todo} text={todo.text} />\r\n              ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport \"./Form.css\";\r\n\r\nfunction Form({setInputText, todos, setTodos, inputText}) {\r\n    const inputTextHandler = (e) =>{\r\n       console.log(e.target.value);\r\n       setInputText(e.target.value);\r\n    };\r\n    const submitTodoHandler = (e) =>{\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos, {text:inputText, completed:false, id:Math.random() * 1000}\r\n        ]);\r\n        setInputText('');\r\n    };\r\n    return(\r\n        <form>\r\n            <input onChange = {inputTextHandler} value={inputText} type='text' className='input1' placeholder='Type here' />\r\n            <button onClick = {submitTodoHandler} type='submit' className='btn'>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport './Todo.css';\r\nimport TodoList from './TodoList';\r\nimport Form from './Form'\r\n\r\nfunction Todo() {\r\n// States\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"head-text\">\r\n          <h1 className=\"head\">TodoList</h1>\r\n          {/* <h1 className=\"head2\">Made with REACT JS</h1> */}\r\n          </div>\r\n\r\n          {/* Props */}\r\n\r\n          <Form todos={todos} setTodos={setTodos} setInputText = {setInputText} inputText={inputText}/>\r\n          <TodoList todos={todos} setTodos={setTodos} todos={todos}/>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport './App.css';\nimport Todo from './Components/Todo';\n\nfunction App() {\n  return(\n    <Todo />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}